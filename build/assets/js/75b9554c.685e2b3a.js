"use strict";(self.webpackChunkplayground=self.webpackChunkplayground||[]).push([[1523],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},35610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={author:"Xuan Tran <xuan.tran@katalon.com>",id:"concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7",slug:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-validate-graphql-request-against-a-graphql-schema"},i="[WS] Validate GraphQL request against a GraphQL schema",l={unversionedId:"concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7",id:"concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7",title:"\\[WS\\] Validate GraphQL request against a GraphQL schema",description:"Requirements",source:"@site/docs/concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7.mdx",sourceDirName:".",slug:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-validate-graphql-request-against-a-graphql-schema",permalink:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-validate-graphql-request-against-a-graphql-schema",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7.mdx",tags:[],version:"current",frontMatter:{author:"Xuan Tran <xuan.tran@katalon.com>",id:"concept-53d0203d-666f-4b4b-aa68-e8a1f2dbace7",slug:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-validate-graphql-request-against-a-graphql-schema"},sidebar:"tutorialSidebar",previous:{title:"\\[WS\\] Set HAR File Generation",permalink:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-set-har-file-generation"},next:{title:"\\[WS\\] Validate JSON string against a schema",permalink:"/create-tests/keywords/keyword-description-in-katalon-studio/web-service-keywords/ws-validate-json-string-against-a-schema"}},s={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ws-validate-graphql-request-against-a-graphql-schema"},"[","WS","]"," Validate GraphQL request against a GraphQL schema"),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Katalon Studio version 8.4.0 onwards.")),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Validate a GraphQL request body against a GraphQL schema. The GraphQL schema input can be a GraphQL string, URL, or file path."),(0,r.kt)("p",null,"Keyword name: ",(0,r.kt)("code",null,"WS.validateGraphqlRequestAgainstSchema")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Parameter"),(0,r.kt)("th",null,"Parameter Type"),(0,r.kt)("th",null,"Mandatory"),(0,r.kt)("th",null,"Description")),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"request"),(0,r.kt)("td",null,"RequestObject"),(0,r.kt)("td",null,"Required"),(0,r.kt)("td",null,"Specify the request object that needs to be validated.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"graphqlSchema"),(0,r.kt)("td",null,"String"),(0,r.kt)("td",null,"Required"),(0,r.kt)("td",null,"Specify the GraphQL schema used to validate the request.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"flowControl"),(0,r.kt)("td",null,"FailureHandling"),(0,r.kt)("td",null,"Optional"),(0,r.kt)("td",null,"Specify ",(0,r.kt)("a",{href:"/maintain/configure-failure-handling-settings-in-katalon-studio"},"failure handling")," schema to determine whether the execution should be allowed to continue or stop.")))),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Parameter Type"),(0,r.kt)("th",null,"Description")),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"true"),": the request passes the validation."),(0,r.kt)("li",null,(0,r.kt)("code",null,"false"),": the request doesn't pass the validation.")))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"If Katalon Studio cannot find the schema file, the request does not have a body content, or the request doesn't pass the validation, throw: ",(0,r.kt)("code",null,"StepFailedException"),"."))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"You want to validate a GraphQL request body against a GraphQL schema before sending the request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint\nimport static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase\nimport static com.kms.katalon.core.testdata.TestDataFactory.findTestData\nimport static com.kms.katalon.core.testobject.ObjectRepository.findTestObject\nimport static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject\nimport com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint\nimport com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW\nimport com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile\nimport com.kms.katalon.core.model.FailureHandling as FailureHandling\nimport com.kms.katalon.core.testcase.TestCase as TestCase\nimport com.kms.katalon.core.testdata.TestData as TestData\nimport com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW\nimport com.kms.katalon.core.testobject.RequestObject\nimport com.kms.katalon.core.testobject.TestObject as TestObject\nimport com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS\nimport com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI\nimport com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows\nimport internal.GlobalVariable as GlobalVariable\nimport org.openqa.selenium.Keys as Keys\n\u200b\n// User wants to validate a GraphQL query in request body before sending the request\nRequestObject req = findTestObject('Country/CountryQuerySchema');\nString graphqlSchema = \n'''\ntype Continent {\n    code: ID!\n    name: String!\n    countries: [Country!]!\n}\n\u200b\ntype Country {\n    code: ID!\n    name: String!\n    native: String!\n    phone: String!\n    continent: Continent!\n    capital: String\n    currency: String\n    languages: [Language!]!\n    emoji: String!\n    emojiU: String!\n    states: [State!]!\n}\ntype State {\n    code: String\n    name: String!\n    country: Country!\n}\ntype Language {\n    code: ID!\n    name: String\n    native: String\n    rtl: Boolean!\n}\ninput StringQueryOperatorInput {\n    eq: String\n    ne: String\n    in: [String]\n    nin: [String]\n    regex: String\n    glob: String\n}\ninput CountryFilterInput {\n    code: StringQueryOperatorInput\n    currency: StringQueryOperatorInput\n    continent: StringQueryOperatorInput\n}\ninput ContinentFilterInput {\n    code: StringQueryOperatorInput\n}\ninput LanguageFilterInput {\n    code: StringQueryOperatorInput\n}\n\u200b\ntype Query {\n    continents(filter: ContinentFilterInput): [Continent!]!\n    continent(code: ID!): Continent\n    countries(filter: CountryFilterInput): [Country!]!\n    country(code: ID!): Country\n    languages(filter: LanguageFilterInput): [Language!]!\n    language(code: ID!): Language\n}\n'''\n\u200b\nif (WS.validateGraphqlRequestAgainstSchema(req, graphqlSchema)) {\n    res = WS.sendRequest(req)\n}\n")))}p.isMDXComponent=!0}}]);