"use strict";(self.webpackChunkplayground=self.webpackChunkplayground||[]).push([[72843],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(k,i(i({ref:t},c),{},{components:n})):o.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={author:"Hao Le <hao.le@katalon.com>",id:"concept-982afc5b-5c93-4111-847c-c83228d4d2a3",slug:"/analyze/analytics/visual-testing/robot-framework-integration-with-visual-testing"},i="Robot Framework integration with Visual Testing",l={unversionedId:"concept-982afc5b-5c93-4111-847c-c83228d4d2a3",id:"concept-982afc5b-5c93-4111-847c-c83228d4d2a3",title:"Robot Framework integration with Visual Testing",description:"The Robot Framework package testops-robot allows you to apply Katalon Visual Testing directly in a Robot Framework test case. The package provides you with a simple interface to upload checkpoint images and retrieve comparison results. Status of each Robot Framework test case can be promptly driven by each comparison result returned from Katalon Visual Testing",source:"@site/docs/concept-982afc5b-5c93-4111-847c-c83228d4d2a3.mdx",sourceDirName:".",slug:"/analyze/analytics/visual-testing/robot-framework-integration-with-visual-testing",permalink:"/analyze/analytics/visual-testing/robot-framework-integration-with-visual-testing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concept-982afc5b-5c93-4111-847c-c83228d4d2a3.mdx",tags:[],version:"current",frontMatter:{author:"Hao Le <hao.le@katalon.com>",id:"concept-982afc5b-5c93-4111-847c-c83228d4d2a3",slug:"/analyze/analytics/visual-testing/robot-framework-integration-with-visual-testing"},sidebar:"tutorialSidebar",previous:{title:"Adjust the pixel sensitivity level",permalink:"/analyze/analytics/visual-testing/adjust-the-pixel-sensitivity-level"},next:{title:"View Katalon Studio test results in Jira tickets",permalink:"/analyze/integration-for-test-analyzing/jira-integration/view-katalon-studio-test-results-in-jira-tickets"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure the Robot Framework integration",id:"configure-the-robot-framework-integration",level:2},{value:"Sample Robot Framework project",id:"sample-robot-framework-project",level:2},{value:"Known issues",id:"known-issues",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"robot-framework-integration-with-visual-testing"},"Robot Framework integration with Visual Testing"),(0,a.kt)("p",null,"The Robot Framework package ",(0,a.kt)("code",null,"testops-robot")," allows you to apply Katalon Visual Testing directly in a Robot Framework test case. The package provides you with a simple interface to upload checkpoint images and retrieve comparison results. Status of each Robot Framework test case can be promptly driven by each comparison result returned from Katalon Visual Testing"),(0,a.kt)("p",null,"You can find the sample project for ",(0,a.kt)("code",null,"testops-robot")," our GitHub repository: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio-samples/katalon-testops-robot-sample"},"katalon-testops-robot-sample"),"."),(0,a.kt)("p",null,"This guide shows you how to configure the ",(0,a.kt)("code",null,"testops-robot")," package and perform visual testing with the sample project."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Subscriptions to Visual Testing Standard ","(","VTS",")"," or Visual Testing Professional ","(","VTP",")",". See: ",(0,a.kt)("a",{parentName:"p",href:"/administer/katalon-platform-packages/visual-testing-feature-comparison"},"Visual Testing Feature Comparison"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Python version 3.6 or above."))),(0,a.kt)("h2",{id:"configure-the-robot-framework-integration"},"Configure the Robot Framework integration"),(0,a.kt)("p",null,"To use the ",(0,a.kt)("code",null,"testops-robot")," package, you need to set up the configuration file ",(0,a.kt)("code",null,"testops-config.json")," for your Robot Framework tests. This configuration file includes the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"apiKey"),": The API key to authenticate with Katalon Platform. See: [Generate a Katalon API Key](/administer/settings/katalon-api-key-in-katalon-testops#)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"projectId"),": The ID of your Katalon project."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"reportFolder"),": The local folder to store your test results."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"baselineCollectionId"),": The ID of the baseline collection to store baseline images. See: [Baseline collection](/analyze/analytics/visual-testing/baseline-collection).")),(0,a.kt)("p",null,"Follow these steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Sign in to ",(0,a.kt)("a",{parentName:"p",href:"https://testops.katalon.io/login"},"Katalon TestOps")," and go to your project.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Go to ",(0,a.kt)("strong",{parentName:"p"},"Configurations")," ",">"," ",(0,a.kt)("strong",{parentName:"p"},"Integrations"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("strong",{parentName:"p"},"Integrations")," tab, select ",(0,a.kt)("strong",{parentName:"p"},"Robot Framework - Python")," and follow the on-screen instructions."),(0,a.kt)("admonition",{parentName:"li",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"When the ",(0,a.kt)("strong",{parentName:"li"},"Visual Baseline Collection")," toggle is on and there is no baseline collection in TestOps, the system will automatically generate a default baseline collection. See: ",(0,a.kt)("a",{parentName:"li",href:"/analyze/analytics/visual-testing/robot-framework-integration-with-visual-testing"},"Robot Framework integration with Visual Testing"),"."))),(0,a.kt)("img",{src:"/doc_images/Documents/Analyze/Analytics/Visual_testing/visual_testing_robot_framework/images/TestOps_Robot_Framework_configuration.png",width:700,alt:"TestOps Integrations tab"}))),(0,a.kt)("p",null,"Once you've finished the instructions, TestOps produces two files that you can use in your Robot Framework project:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("code",null,"testops-config.json")),": The file that stores configuration information for ",(0,a.kt)("code",null,"testops-robot"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("code",null,"katalon","_","visual","_","testing.py")),": The Python library file that contains the image verification function ",(0,a.kt)("code",null,"verify","_","checkpoint"),". This function uploads and verifies checkpoint images."))),(0,a.kt)("img",{src:"/doc_images/Documents/Analyze/Analytics/Visual_testing/visual_testing_robot_framework/images/TestOps_Robot_Framework_config_files.png",width:700,alt:"Configuration files produced"}),(0,a.kt)("p",null,"When you call the ",(0,a.kt)("code",null,"verify","_","checkpoint")," function in a Robot Framework test case, ",(0,a.kt)("code",null,"testops-robot")," will look for configuration information ","(","API key, baseline collection ID, ...",")"," in ",(0,a.kt)("code",null,"testops-config.json")," and make requests to TestOps server."),(0,a.kt)("h2",{id:"sample-robot-framework-project"},"Sample Robot Framework project"),(0,a.kt)("p",null,"To quickly get started with ",(0,a.kt)("code",null,"testops-robot"),", you can clone our sample project and run a sample test case: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio-samples/katalon-testops-robot-sample"},"katalon-testops-robot-sample"),"."),(0,a.kt)("p",null,"In the ",(0,a.kt)("code",null,"resource.robot")," file of the project, you can find all the sample keywords and the use of the ",(0,a.kt)("code",null,"Verify checkpoint")," function defined in ",(0,a.kt)("code",null,"VisualLibrary")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\n*** Settings ***\nDocumentation     A resource file with reusable keywords and variables.\n...\n...               The system specific keywords created here form our own\n...               domain specific language. They utilize keywords provided\n...               by the imported SeleniumLibrary.\n| Library |       SeleniumLibrary\n| Library |       ../library/VisualLibrary.py\n\n\n*** Variables ***\n${SERVER}         https://katalon-demo-cura.herokuapp.com\n${BROWSER}        Chrome\n${DELAY}          0\n${VALID USER}     John Doe\n${VALID PASSWORD}    ThisIsNotAPassword\n${CHECKPOINT_LOCATION}    checkpoint\n${BOOKING_URL}    ${SERVER}/#appointment\n*** Keywords ***\nAnalyze checkpoint "${checkpoint}"\n    Verify checkpoint    ${checkpoint}\n\nOpen Browser To Cura Shop\n    Open Browser    ${SERVER}    ${BROWSER}\n    Maximize Browser Window\n    Set Selenium Speed    ${DELAY}\n\nInput Username\n    [Arguments]    ${username}\n    Input Text    txt-username    ${username}\n\nEnter Password\n    [Arguments]    ${password}\n    Input Text    txt-password    ${password}\n\nSubmit Credentials\n    Click Button    btn-login\n\nWelcome Page Should Be Open\n    Location Should Be    ${BOOKING_URL}\n    Title Should Be    CURA Healthcare Service\n\nLogin Should Have Failed\n    Element Should Be Visible    //p[contains(text(), "Login failed! Please ensure the username and password are valid.")]\n\n')),(0,a.kt)("p",null,"In the test case ",(0,a.kt)("code",null,"valid","_","login","_","with","_","AI.robot"),", we use the ",(0,a.kt)("code",null,"Analyze checkpoint")," keyword to verify images:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\n*** Settings ***\nDocumentation     A test suite with a single test for valid login.\n...\n...               This test has a workflow that is created using keywords in\n...               the imported resource file.\nResource          resource.robot\n\n*** Test Cases ***\nValid Login\n    Open Browser To Cura Shop\n    Capture Page Screenshot    ${CHECKPOINT_LOCATION}/Review-Appoitment.png\n    Analyze checkpoint "${CHECKPOINT_LOCATION}/Review-Appoitment.png"\n    Click Element       //a[contains(text(),\'Make Appointment\')]\n    Capture Page Screenshot    ${CHECKPOINT_LOCATION}/Login-Dialog-Origin.png\n    Analyze checkpoint "${CHECKPOINT_LOCATION}/Login-Dialog-Origin.png"\n    Input Username    ${VALID USER}\n    Enter Password    ${VALID PASSWORD}\n    Capture Page Screenshot    ${CHECKPOINT_LOCATION}/Login-Dialog-With-Data.png\n    Analyze checkpoint "${CHECKPOINT_LOCATION}/Login-Dialog-With-Data.png"\n    Submit Credentials\n    Element Should Be Visible  appointment\n    [Teardown]    Close Browser\n\n')),(0,a.kt)("p",null,"To execute the test case, follow these steps in your terminal:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Clone the sample project to your local machine."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/katalon-studio-samples/katalon-testops-robot-sample.git\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Navigate into the project folder and install the Python dependencies."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"pip install -r requirements.txt\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run a sample test case. Here we run a sample test case with a valid login scenario ",(0,a.kt)("code",null,"valid","_","login","_","with","_","AI.robot"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"robot --listener testops.Listener test_sample/valid_login_with_AI.robot\n")),(0,a.kt)("p",{parentName:"li"},"The test case is then executed with the Visual Testing steps.",(0,a.kt)("img",{src:"/doc_images/Documents/Analyze/Analytics/Visual_testing/visual_testing_robot_framework/images/Robot_Framework_sample_test_run.png",width:600,alt:"Execution terminal"})))),(0,a.kt)("p",null,"Once the execution is done, you can view the test results stored in the ",(0,a.kt)("code",null,"testops-report")," folder ","(","specified in ",(0,a.kt)("code",null,"testops-config.json"),")"," or with the ",(0,a.kt)("code",null,"report.html")," file.",(0,a.kt)("img",{src:"/doc_images/Documents/Analyze/Analytics/Visual_testing/visual_testing_robot_framework/images/Robot_Framework_sample_report.png",width:700,alt:"report.html"})),(0,a.kt)("h2",{id:"known-issues"},"Known issues"),(0,a.kt)("p",null,"When running a Robot Framework with Katalon Visual Testing steps for the first time, you might encounter the following behaviors and issues:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the baseline collection is not specified in the configuration file, TestOps will generate a default baseline collection.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When a Robot Framework test case is run, captured images are uploaded to TestOps one after another ","(","as opposed to being uploaded altogether in a Katalon test suite",")",". The first captured image will be labeled ",(0,a.kt)("em",{parentName:"p"},"New - Passed")," and the rest will have ",(0,a.kt)("em",{parentName:"p"},"New - Unresolved")," status. Therefore, to correctly compare images, you need to mark and add the ",(0,a.kt)("em",{parentName:"p"},"Unresolved")," images to the default baseline manually."))),(0,a.kt)("p",null,"We recommend creating a baseline collection and specifying it in the configuration file."))}m.isMDXComponent=!0}}]);