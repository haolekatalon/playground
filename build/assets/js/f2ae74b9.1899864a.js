"use strict";(self.webpackChunkplayground=self.webpackChunkplayground||[]).push([[16413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={id:"concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc",slug:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/create-your-first-katalon-studio-plugin"},l="Create your first Katalon Studio plugin",r={unversionedId:"concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc",id:"concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc",title:"Create your first Katalon Studio plugin",description:"This tutorial will walk you through creating your first Katalon Studio plugin. The plugin in this tutorial does two things:",source:"@site/docs/concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc.mdx",sourceDirName:".",slug:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/create-your-first-katalon-studio-plugin",permalink:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/create-your-first-katalon-studio-plugin",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc.mdx",tags:[],version:"current",frontMatter:{id:"concept-03b152b3-b22c-4d0e-86b0-0d2954aa9cdc",slug:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/create-your-first-katalon-studio-plugin"},sidebar:"tutorialSidebar",previous:{title:"Installing plugin offline in Katalon Studio",permalink:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/installing-plugin-offline-in-katalon-studio"},next:{title:"How to develop a Custom Keywords plugin in Katalon Studio",permalink:"/plugins-and-add-ons/katalon-store/katalon-studio-plugins/how-to-develop-a-custom-keywords-plugin-in-katalon-studio"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Step 1: Create a Maven-based Java project",id:"step-1-create-a-maven-based-java-project",level:2},{value:"Step 2: Update <code>pom.xml</code>",id:"step-2-update-pomxml",level:2},{value:"Step 3:",id:"step-3",level:2},{value:"Step 4: Create your <code>implementationClass</code>",id:"step-4-create-your-implementationclass",level:2},{value:"Step 5: Build your plugin",id:"step-5-build-your-plugin",level:2},{value:"Step 6: Test your plugin",id:"step-6-test-your-plugin",level:2},{value:"Step 7: Create an execution event extension",id:"step-7-create-an-execution-event-extension",level:2},{value:"Step 8: Reload your plugin",id:"step-8-reload-your-plugin",level:2},{value:"Step 9: Test execution event",id:"step-9-test-execution-event",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-your-first-katalon-studio-plugin"},"Create your first Katalon Studio plugin"),(0,o.kt)("p",null,"This tutorial will walk you through creating your first Katalon Studio plugin. The plugin in this tutorial does two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Listens to the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/katalon-studio/katalon-studio-platform/blob/master/com.katalon.platform/src/main/java/com/katalon/platform/api/extension/PluginActivationListener.java"},"plugin activation event")," then prints a hello message after the plugin was installed successfully in Katalon Studio."),(0,o.kt)("li",{parentName:"ul"},"Listens to the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/katalon-studio/katalon-studio-platform/blob/master/com.katalon.platform/src/main/java/com/katalon/platform/api/extension/EventListenerInitializer.java"},"test execution event")," then prints a report message in Console.")),(0,o.kt)("p",null,"You can find the source code of this tutorial ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio/katalon-studio-sample-plugin"},"here"),"."),(0,o.kt)("p",null,"A Katalon Studio plugin is a Maven-based Java project, and also an ",(0,o.kt)("a",{parentName:"p",href:"http://spring.io/blog/2008/02/18/creating-osgi-bundles/"},"OSGI bundle 1")," project. A plugin contains these components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("code",null,"pom.xml")," to describe your plugin, what it is ","(","name, version, vendor,etc",")","."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("code",null,"plugin.xml")," to let Katalon Studio know about all the extensions of your plugin."),(0,o.kt)("li",{parentName:"ul"},"All packaged codes of your plugin.")),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Java SDK 1.8"),(0,o.kt)("li",{parentName:"ol"},"Maven 3.3+"),(0,o.kt)("li",{parentName:"ol"},"Download Katalon Studio version 6.0.3 ","(","beta",")",": ",(0,o.kt)("a",{parentName:"li",href:"https://s3.amazonaws.com/katalon/release-beta/6.0.3/Katalon_Studio_Windows_32.zip"},"win32"),", ",(0,o.kt)("a",{parentName:"li",href:"https://s3.amazonaws.com/katalon/release-beta/6.0.3/Katalon_Studio_Windows_64.zip"},"win64"),", ",(0,o.kt)("a",{parentName:"li",href:"https://s3.amazonaws.com/katalon/release-beta/6.0.3/Katalon+Studio.dmg"},"macOS"),", and ",(0,o.kt)("a",{parentName:"li",href:"https://s3.amazonaws.com/katalon/release-beta/6.0.3/Katalon_Studio_Linux_64.tar.gz"},"linux64"),".")),(0,o.kt)("h2",{id:"step-1-create-a-maven-based-java-project"},"Step 1: Create a Maven-based Java project"),(0,o.kt)("p",null,"Let's create your Java Maven-based project with project structure looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500\u2500 main/\n\u2502       \u251c\u2500\u2500\u2500 java/\n\u2502       \u2514\u2500\u2500\u2500 resources/\n\u2502           \u2514\u2500\u2500\u2500 plugin.xml\n\u2514\u2500\u2500\u2500 pom.xml\n\n")),(0,o.kt)("p",null,"During this tutorial, we are using the example declarations below. These declarations can be changed depend on your specific needs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"com.mycompany.plugin")," is groupId."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"my-first-katalon-plugin")," is artifactId."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"com.mycompany.plugin")," is the default package.")),(0,o.kt)("h2",{id:"step-2-update-pomxml"},"Step 2: Update ",(0,o.kt)("code",null,"pom.xml")),(0,o.kt)("p",null,"Update your ",(0,o.kt)("code",null,"pom.xml")," file with the template below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>com.katalon</groupId>\n        <artifactId>com.katalon.platform.parent</artifactId>\n        <version>1.0.17</version>\n    </parent>\n\n    \x3c!-- REPLACE ME: Your plugin description here --\x3e\n    <groupId>com.mycompany.plugin</groupId>\n    <artifactId>my-first-katalon-plugin</artifactId>\n    <version>1.0.0</version>\n\n    <packaging>bundle</packaging>\n\n    <dependencies>\n        \x3c!-- Katalon Platform dependencies--\x3e\n        <dependency>\n            <groupId>com.katalon</groupId>\n            <artifactId>com.katalon.platform</artifactId>\n            <version>1.0.17</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <version>2.4</version>\n                <executions>\n                    <execution>\n                        <id>unpack-dependencies</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>unpack-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <excludes>com/katalon/platform/**,org/eclipse/**,org/osgi/**</excludes>\n                            <includes>**/*.class</includes>\n                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <extensions>true</extensions>\n                <configuration>\n                    <instructions>\n                        <Bundle-SymbolicName>${project.groupId}.${project.artifactId};singleton:=true</Bundle-SymbolicName>\n                        <Bundle-Version>${project.version}</Bundle-Version>\n                        <Import-Package></Import-Package>\n                        <DynamicImport-Package>*</DynamicImport-Package>\n                        <_noee>true</_noee>\n                        <_nouse>true</_nouse>\n\n                        \x3c!-- REPLACE ME: Change your public export package here --\x3e\n                        <Export-Package>com.mycompany.plugin*</Export-Package>\n                    </instructions>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n')),(0,o.kt)("p",null,"The tags can be changed under ",(0,o.kt)("strong",{parentName:"p"},"REPLACE ME")," if needed."),(0,o.kt)("h2",{id:"step-3"},"Step 3:"),(0,o.kt)("p",null,"Katalon Platform allows client plugins to contribute to Katalon Studio core features. All of the features are described at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio/katalon-studio-platform/blob/master/com.katalon.platform/plugin.xml"},"this link"),"."),(0,o.kt)("p",null,"There are many ",(0,o.kt)("code",null,"extension")," tags here. Each of these tags is a ",(0,o.kt)("code",null,"Extension Point")," describing specifications to allow client plugins hook into Katalon Studio platform. A plugin can contribute to many extension points by declaring it in ",(0,o.kt)("code",null,"plugin.xml")," file."),(0,o.kt)("p",null,"For example, we want to ",(0,o.kt)("code",null,"Subscribe plugin installation event"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<extension\n        point="com.katalon.platform.extensions_point">\n      <point\n            id="com.katalon.platform.api.extension.pluginActivationListener"\n            interfaceClass="com.katalon.platform.api.extension.PluginActivationListener"\n            serviceClass="com.katalon.platform.internal.lifecycle.PluginActivationListenerService">\n      </point>  \n</extension>\n\n')),(0,o.kt)("p",null,"Above declarations mean:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"id: the id of the extension point."),(0,o.kt)("li",{parentName:"ul"},"interfaceClass: the required interface class that client plugins should provide the implementation to extend this feature."),(0,o.kt)("li",{parentName:"ul"},"serviceClass: an internal service class.")),(0,o.kt)("p",null,"To extend this extension point, we need to declare in ",(0,o.kt)("code",null,"plugin.xml")," as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<plugin>\n    <extension\n            point="com.katalon.platform.extensions">\n        <point\n              id="com.mycompany.plugin.myFirstExtensionId"\n              extensionPointId="com.katalon.platform.api.extension.pluginActivationListener"\n              implementationClass="com.mycompany.plugin.MyPluginActivationListener">\n        </point>\n    </extension>\n</plugin>\n\n')),(0,o.kt)("p",null,"Above declarations mean:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"id: the unique id of the your extension. You can replace by any name but it must be unique."),(0,o.kt)("li",{parentName:"ul"},"extensionPointId: the id of the extension point. Simply change the id if you want to extend other extension points."),(0,o.kt)("li",{parentName:"ul"},"implementationClass: the class that implements the ",(0,o.kt)("code",null,"interfaceClass")," mentioned at Step 3. Next, we create it.")),(0,o.kt)("h2",{id:"step-4-create-your-implementationclass"},"Step 4: Create your ",(0,o.kt)("code",null,"implementationClass")),(0,o.kt)("p",null,"Create a class file ",(0,o.kt)("code",null,"MyPluginActivationListener")," under ",(0,o.kt)("code",null,"src/java/main")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'package com.mycompany.plugin;\n\nimport com.katalon.platform.api.Plugin;\nimport com.katalon.platform.api.extension.PluginActivationListener;\n\npublic class MyPluginActivationListener implements PluginActivationListener {\n    // After this plugin is activated, we will print a hello message to console.\n    @Override\n    public void afterActivation(Plugin plugin) {\n        System.out.println("Hello, my plugin is: " + plugin.getPluginId());\n    }\n}\n\n')),(0,o.kt)("h2",{id:"step-5-build-your-plugin"},"Step 5: Build your plugin"),(0,o.kt)("p",null,"Type ",(0,o.kt)("code",null,"mvn clean package")," and wait until the ",(0,o.kt)("strong",{parentName:"p"},"BUILD SUCCESS")," message is displayed from the command line window."),(0,o.kt)("img",{src:"https://github.com/katalon-studio/docs-images/raw/master/katalon-store/docs/publisher/build-plugin.png",width:500}),(0,o.kt)("p",null,"After the build completed, there is a ",(0,o.kt)("code",null,"my-first-katalon-plugin.jar")," under the ",(0,o.kt)("code",null,"target")," folder, we will need this to launch your plugin in the next step."),(0,o.kt)("h2",{id:"step-6-test-your-plugin"},"Step 6: Test your plugin"),(0,o.kt)("p",null,"Open Katalon Studio ","(","since 6.0.4",")"," and activate ",(0,o.kt)("strong",{parentName:"p"},"Event Log")," tab that's nearby ",(0,o.kt)("code",null,"Console Log")," tab. All your plugin's message will be displayed here."),(0,o.kt)("p",null,"Launch your plugin by clicking on ",(0,o.kt)("strong",{parentName:"p"},"Plugin/Install Plugin")," menu and choose the jar was mentioned above."),(0,o.kt)("p",null,"You should be able to see the notification message ",(0,o.kt)("code",null,"Plugin installed successfully")," from Katalon Studio and the message ",(0,o.kt)("code",null,"Hello, my plugin is: com.mycomany.my-first-katalon-plugin")," is displayed in ",(0,o.kt)("code",null,"Event Log")," tab. Success!"),(0,o.kt)("img",{src:"https://github.com/katalon-studio/docs-images/raw/master/katalon-store/docs/publisher/test-plugin.png",width:500}),(0,o.kt)("h2",{id:"step-7-create-an-execution-event-extension"},"Step 7: Create an execution event extension"),(0,o.kt)("p",null,"To create an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio/katalon-studio-platform/blob/master/com.katalon.platform/src/main/java/com/katalon/platform/api/extension/EventListenerInitializer.java"},"execution event extension"),", we go back to ",(0,o.kt)("code",null,(0,o.kt)("a",{href:"https://github.com/katalon-studio/katalon-studio-platform/blob/master/com.katalon.platform/plugin.xml"},"plugin.xml"))," file of Katalon Studio Platform, and find the declaration of ",(0,o.kt)("code",null,"Subscribe KS execution event"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<extension\n        point="com.katalon.platform.extensions_point">\n    <point\n        id="com.katalon.platform.api.extension.eventListener"\n        interfaceClass="com.katalon.platform.api.event.EventListenerInitializer"\n        serviceClass="com.katalon.platform.internal.event.EventListenerService">\n    </point>\n</extension>\n\n')),(0,o.kt)("p",null,"Now, we need to declare our extension in ",(0,o.kt)("code",null,"plugin.xml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<extension\n        point="com.katalon.platform.extensions">\n    <point\n        id="com.mycompany.plugin.myAnotherExtensionId"\n        extensionPointId="com.katalon.platform.api.extension.eventListener"\n        implementationClass="com.mycompany.plugin.MyExecutionEventListener">\n    </point>\n</extension>\n\n')),(0,o.kt)("p",null,"and create ",(0,o.kt)("code",null,"implementationClass"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'package com.mycompany.plugin;\n\nimport org.osgi.service.event.Event;\n\nimport com.katalon.platform.api.event.EventListener;\nimport com.katalon.platform.api.event.ExecutionEvent;\nimport com.katalon.platform.api.execution.TestSuiteExecutionContext;\nimport com.katalon.platform.api.extension.EventListenerInitializer;\npublic class MyExecutionEventListener implements EventListenerInitializer {\n\n    @Override\n    public void registerListener(EventListener listener) {\n        listener.on(Event.class, event -> {\n            if (ExecutionEvent.TEST_SUITE_FINISHED_EVENT.equals(event.getTopic())) {\n                ExecutionEvent eventObject = (ExecutionEvent) event.getProperty("org.eclipse.e4.data");\n\n                TestSuiteExecutionContext testSuiteContext = (TestSuiteExecutionContext) eventObject\n                        .getExecutionContext();\n\n                System.out.println("Test execution completed: " + testSuiteContext.getReportId());\n            }\n        });\n    }\n}\n\n')),(0,o.kt)("p",null,"This ",(0,o.kt)("code",null,"implementationClass")," just prints an execution completed message to console but you can extend this class to do more business logics. A good example for this is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/katalon-studio/katalon-studio-slack-plugin"},"Slack Integration Plugin"),". You can see how it integrates with Slack application."),(0,o.kt)("h2",{id:"step-8-reload-your-plugin"},"Step 8: Reload your plugin"),(0,o.kt)("p",null,"Type ",(0,o.kt)("code",null,"mvn clean package")," and wait until the ",(0,o.kt)("strong",{parentName:"p"},"BUILD SUCCESS")," message is displayed in the command line window."),(0,o.kt)("p",null,"Click on ",(0,o.kt)("code",null,"Plugin/Uninstall Plugin")," to uninstall your first loaded plugin."),(0,o.kt)("p",null,"Click on ",(0,o.kt)("code",null,"Plugin/Install Plugin")," and choose the jar file again."),(0,o.kt)("h2",{id:"step-9-test-execution-event"},"Step 9: Test execution event"),(0,o.kt)("p",null,"Run the test suite and wait until the execution finished."),(0,o.kt)("p",null,"Look at the ",(0,o.kt)("code",null,"Event Log")," and the message should be displayed as shown below:"),(0,o.kt)("img",{src:"https://github.com/katalon-studio/docs-images/raw/master/katalon-store/docs/publisher/test-execution-event.png",width:500}))}d.isMDXComponent=!0}}]);