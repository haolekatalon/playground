"use strict";(self.webpackChunkplayground=self.webpackChunkplayground||[]).push([[87097],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(a),d=r,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||s;return a?n.createElement(y,o(o({ref:t},p),{},{components:a})):n.createElement(y,o({ref:t},p))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},63415:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={author:"Yen Nguyen <yen.nguyen@katalon.com>",id:"concept-ff4c26de-328d-4f98-9ae8-2c523714eac0",slug:"/create-tests/create-test-cases/statements/binary-statements"},o="Binary Statements",i={unversionedId:"concept-ff4c26de-328d-4f98-9ae8-2c523714eac0",id:"concept-ff4c26de-328d-4f98-9ae8-2c523714eac0",title:"Binary Statements",description:"A Binary statement represents a dual expression consisting of two single\xa0expressions\xa0\\(variables, strings, numbers, methods...\\) and an operator, for example\xa0Operators.",source:"@site/docs/concept-ff4c26de-328d-4f98-9ae8-2c523714eac0.mdx",sourceDirName:".",slug:"/create-tests/create-test-cases/statements/binary-statements",permalink:"/create-tests/create-test-cases/statements/binary-statements",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concept-ff4c26de-328d-4f98-9ae8-2c523714eac0.mdx",tags:[],version:"current",frontMatter:{author:"Yen Nguyen <yen.nguyen@katalon.com>",id:"concept-ff4c26de-328d-4f98-9ae8-2c523714eac0",slug:"/create-tests/create-test-cases/statements/binary-statements"},sidebar:"tutorialSidebar",previous:{title:"Exception Handling statements",permalink:"/create-tests/create-test-cases/statements/exception-handling-statements"},next:{title:"Method Call Statements",permalink:"/create-tests/create-test-cases/statements/method-call-statements"}},c={},l=[{value:"In manual view",id:"in-manual-view",level:2},{value:"In script view",id:"in-script-view",level:2},{value:"In Script view",id:"in-script-view-1",level:3}],p={toc:l},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"binary-statements"},"Binary Statements"),(0,r.kt)("p",null,"A Binary statement represents a dual expression consisting of two single\xa0",(0,r.kt)("strong",{parentName:"p"},"expressions"),"\xa0","(","variables, strings, numbers, methods...",")"," and an operator, for example: +, -, ","*",", ","<",", ","<","=,\xa0!, etc.",")",". For more details about using operators in Groovy, refer to\xa0this Groovy documentation:\xa0",(0,r.kt)("a",{parentName:"p",href:"http://groovy-lang.org/operators.html"},"Operators"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Once a test step is added as any of the control statements, it is not allowed to change into another keyword."))),(0,r.kt)("h2",{id:"in-manual-view"},"In manual view"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open a test case in\xa0",(0,r.kt)("strong",{parentName:"p"},"Manual"),"\xa0view. Click on the drop-down icon of the\xa0",(0,r.kt)("strong",{parentName:"p"},"Add")," button, then choose\xa0",(0,r.kt)("strong",{parentName:"p"},"Binary Statements"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To add a keyword under a statement, select that statement, then click ",(0,r.kt)("strong",{parentName:"p"},"Add"),". A test step is created under that statement."),(0,r.kt)("img",{src:"/doc_images/Documents/Create_tests/Create_Test_Cases/Statements/Images/set-binary-statement.png",width:300,alt:"binary statement"}),(0,r.kt)("p",{parentName:"li"},"A test step representing a binary statement is added to the test case."),(0,r.kt)("img",{src:"/doc_images/Documents/Create_tests/Create_Test_Cases/Statements/Images/830-binary-statements.png",width:600,alt:"add binary statement"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Double-click on the ",(0,r.kt)("strong",{parentName:"p"},"Input")," cell to edit those required components."),(0,r.kt)("p",{parentName:"li"},"Binary statements are normally used to assign either values to test objects"),(0,r.kt)("img",{src:"/doc_images/Documents/Create_tests/Create_Test_Cases/Statements/Images/Binary-Statement.png",width:600,alt:"Binary statement"}),(0,r.kt)("p",{parentName:"li"},"or test objects to variables to take the next steps."),(0,r.kt)("img",{src:"/doc_images/Documents/Create_tests/Create_Test_Cases/Statements/Images/BS-2.png",width:600,alt:"Binary statement"})),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Save the test case when you're done."),(0,r.kt)("img",{src:"/doc_images/Documents/Create_tests/Create_Test_Cases/Statements/Images/830-binary-statement-steps.png",width:600,alt:"Binary statements step"}))),(0,r.kt)("h2",{id:"in-script-view"},"In script view"),(0,r.kt)("h3",{id:"in-script-view-1"},"In Script view"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Script")," view of a test case allows you to programmatically define and handle binary statements using Groovy or Java languages."),(0,r.kt)("p",null,"For example :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To assign a value to a test object"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"myText = 'Welcome to Katalon Studio'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To assign a test object to a variable"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"myObject = findTestObject('my object') WebUI.setText(myObject, 'Welcome to Katalon Studio') WebUI.verifyTextPresent('Welcome to Katalon Studio', false)\n")))))}u.isMDXComponent=!0}}]);